/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.medidata.avroserver.protocol.v1;  
@SuppressWarnings("all")
public class Location extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Location\",\"namespace\":\"com.medidata.avroserver.protocol.v1\",\"fields\":[{\"name\":\"lat\",\"type\":\"float\",\"default\":0.0},{\"name\":\"lon\",\"type\":\"float\",\"default\":0.0}]}");
  @Deprecated public float lat;
  @Deprecated public float lon;
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return lat;
    case 1: return lon;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: lat = (java.lang.Float)value$; break;
    case 1: lon = (java.lang.Float)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'lat' field.
   */
  public java.lang.Float getLat() {
    return lat;
  }

  /**
   * Sets the value of the 'lat' field.
   * @param value the value to set.
   */
  public void setLat(java.lang.Float value) {
    this.lat = value;
  }

  /**
   * Gets the value of the 'lon' field.
   */
  public java.lang.Float getLon() {
    return lon;
  }

  /**
   * Sets the value of the 'lon' field.
   * @param value the value to set.
   */
  public void setLon(java.lang.Float value) {
    this.lon = value;
  }

  /** Creates a new Location RecordBuilder */
  public static com.medidata.avroserver.protocol.v1.Location.Builder newBuilder() {
    return new com.medidata.avroserver.protocol.v1.Location.Builder();
  }
  
  /** Creates a new Location RecordBuilder by copying an existing Builder */
  public static com.medidata.avroserver.protocol.v1.Location.Builder newBuilder(com.medidata.avroserver.protocol.v1.Location.Builder other) {
    return new com.medidata.avroserver.protocol.v1.Location.Builder(other);
  }
  
  /** Creates a new Location RecordBuilder by copying an existing Location instance */
  public static com.medidata.avroserver.protocol.v1.Location.Builder newBuilder(com.medidata.avroserver.protocol.v1.Location other) {
    return new com.medidata.avroserver.protocol.v1.Location.Builder(other);
  }
  
  /**
   * RecordBuilder for Location instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Location>
    implements org.apache.avro.data.RecordBuilder<Location> {

    private float lat;
    private float lon;

    /** Creates a new Builder */
    private Builder() {
      super(com.medidata.avroserver.protocol.v1.Location.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.medidata.avroserver.protocol.v1.Location.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing Location instance */
    private Builder(com.medidata.avroserver.protocol.v1.Location other) {
            super(com.medidata.avroserver.protocol.v1.Location.SCHEMA$);
      if (isValidValue(fields()[0], other.lat)) {
        this.lat = (java.lang.Float) data().deepCopy(fields()[0].schema(), other.lat);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.lon)) {
        this.lon = (java.lang.Float) data().deepCopy(fields()[1].schema(), other.lon);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'lat' field */
    public java.lang.Float getLat() {
      return lat;
    }
    
    /** Sets the value of the 'lat' field */
    public com.medidata.avroserver.protocol.v1.Location.Builder setLat(float value) {
      validate(fields()[0], value);
      this.lat = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'lat' field has been set */
    public boolean hasLat() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'lat' field */
    public com.medidata.avroserver.protocol.v1.Location.Builder clearLat() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'lon' field */
    public java.lang.Float getLon() {
      return lon;
    }
    
    /** Sets the value of the 'lon' field */
    public com.medidata.avroserver.protocol.v1.Location.Builder setLon(float value) {
      validate(fields()[1], value);
      this.lon = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'lon' field has been set */
    public boolean hasLon() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'lon' field */
    public com.medidata.avroserver.protocol.v1.Location.Builder clearLon() {
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public Location build() {
      try {
        Location record = new Location();
        record.lat = fieldSetFlags()[0] ? this.lat : (java.lang.Float) defaultValue(fields()[0]);
        record.lon = fieldSetFlags()[1] ? this.lon : (java.lang.Float) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
